{"version":3,"file":"validator.js","sources":["../../src/validator.ts"],"sourcesContent":["import { setBy } from '@tanstack/form-core'\nimport type {\n  ValidationError,\n  Validator,\n  ValidatorAdapterParams,\n} from '@tanstack/form-core'\nimport type { AnySchema, ValidationError as YupError } from 'yup'\n\ntype Params = ValidatorAdapterParams<YupError>\ntype TransformFn = NonNullable<Params['transformErrors']>\n\nexport function prefixSchemaToErrors(\n  yupErrors: YupError[],\n  transformErrors: TransformFn,\n) {\n  const schema = new Map<string, YupError[]>()\n\n  for (const yupError of yupErrors) {\n    if (!yupError.path) continue\n\n    const path = yupError.path\n    schema.set(path, (schema.get(path) ?? []).concat(yupError))\n  }\n\n  const transformedSchema = {} as Record<string, ValidationError>\n\n  schema.forEach((value, key) => {\n    transformedSchema[key] = transformErrors(value)\n  })\n\n  return transformedSchema\n}\n\nexport function defaultFormTransformer(transformErrors: TransformFn) {\n  return (zodErrors: YupError[]) => ({\n    form: transformErrors(zodErrors),\n    fields: prefixSchemaToErrors(zodErrors, transformErrors),\n  })\n}\n\nexport const yupValidator =\n  (params: Params = {}): Validator<unknown, AnySchema> =>\n  () => {\n    const transformFieldErrors =\n      params.transformErrors ??\n      ((errors: YupError[]) => errors.map((error) => error.message).join(', '))\n\n    const getTransformStrategy = (validationSource: 'form' | 'field') =>\n      validationSource === 'form'\n        ? defaultFormTransformer(transformFieldErrors)\n        : transformFieldErrors\n\n    return {\n      validate({ value, validationSource }, fn) {\n        try {\n          fn.validateSync(value, { abortEarly: false })\n          return\n        } catch (_e) {\n          const e = _e as YupError\n\n          const transformer = getTransformStrategy(validationSource)\n\n          return transformer(e.inner)\n        }\n      },\n      async validateAsync({ value, validationSource }, fn) {\n        try {\n          await fn.validate(value, { abortEarly: false })\n          return\n        } catch (_e) {\n          const e = _e as YupError\n\n          const transformer = getTransformStrategy(validationSource)\n\n          return transformer(e.inner)\n        }\n      },\n    }\n  }\n"],"names":[],"mappings":"AAWgB,SAAA,qBACd,WACA,iBACA;AACM,QAAA,6BAAa,IAAwB;AAE3C,aAAW,YAAY,WAAW;AAC5B,QAAA,CAAC,SAAS,KAAM;AAEpB,UAAM,OAAO,SAAS;AACf,WAAA,IAAI,OAAO,OAAO,IAAI,IAAI,KAAK,CAAC,GAAG,OAAO,QAAQ,CAAC;AAAA,EAAA;AAG5D,QAAM,oBAAoB,CAAC;AAEpB,SAAA,QAAQ,CAAC,OAAO,QAAQ;AACX,sBAAA,GAAG,IAAI,gBAAgB,KAAK;AAAA,EAAA,CAC/C;AAEM,SAAA;AACT;AAEO,SAAS,uBAAuB,iBAA8B;AACnE,SAAO,CAAC,eAA2B;AAAA,IACjC,MAAM,gBAAgB,SAAS;AAAA,IAC/B,QAAQ,qBAAqB,WAAW,eAAe;AAAA,EAAA;AAE3D;AAEO,MAAM,eACX,CAAC,SAAiB,CAAA,MAClB,MAAM;AACJ,QAAM,uBACJ,OAAO,oBACN,CAAC,WAAuB,OAAO,IAAI,CAAC,UAAU,MAAM,OAAO,EAAE,KAAK,IAAI;AAEzE,QAAM,uBAAuB,CAAC,qBAC5B,qBAAqB,SACjB,uBAAuB,oBAAoB,IAC3C;AAEC,SAAA;AAAA,IACL,SAAS,EAAE,OAAO,iBAAA,GAAoB,IAAI;AACpC,UAAA;AACF,WAAG,aAAa,OAAO,EAAE,YAAY,OAAO;AAC5C;AAAA,eACO,IAAI;AACX,cAAM,IAAI;AAEJ,cAAA,cAAc,qBAAqB,gBAAgB;AAElD,eAAA,YAAY,EAAE,KAAK;AAAA,MAAA;AAAA,IAE9B;AAAA,IACA,MAAM,cAAc,EAAE,OAAO,iBAAA,GAAoB,IAAI;AAC/C,UAAA;AACF,cAAM,GAAG,SAAS,OAAO,EAAE,YAAY,OAAO;AAC9C;AAAA,eACO,IAAI;AACX,cAAM,IAAI;AAEJ,cAAA,cAAc,qBAAqB,gBAAgB;AAElD,eAAA,YAAY,EAAE,KAAK;AAAA,MAAA;AAAA,IAC5B;AAAA,EAEJ;AACF;"}